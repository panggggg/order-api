// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/panggggg/order-service/pkg/entity"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// Order is an autogenerated mock type for the Order type
type Order struct {
	mock.Mock
}

// SaveWithId provides a mock function with given fields: order
func (_m *Order) SaveWithId(order entity.Order) error {
	ret := _m.Called(order)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Order) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendToQueue provides a mock function with given fields: ctx, order
func (_m *Order) SendToQueue(ctx context.Context, order []string) error {
	ret := _m.Called(ctx, order)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Set provides a mock function with given fields: ctx, order
func (_m *Order) Set(ctx context.Context, order entity.Order) (*primitive.ObjectID, error) {
	ret := _m.Called(ctx, order)

	var r0 *primitive.ObjectID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Order) (*primitive.ObjectID, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Order) *primitive.ObjectID); ok {
		r0 = rf(ctx, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*primitive.ObjectID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: ctx, orderId, updateData
func (_m *Order) Upsert(ctx context.Context, orderId string, updateData entity.Order) (bool, error) {
	ret := _m.Called(ctx, orderId, updateData)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.Order) (bool, error)); ok {
		return rf(ctx, orderId, updateData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.Order) bool); ok {
		r0 = rf(ctx, orderId, updateData)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, entity.Order) error); ok {
		r1 = rf(ctx, orderId, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrder creates a new instance of Order. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrder(t interface {
	mock.TestingT
	Cleanup(func())
}) *Order {
	mock := &Order{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
